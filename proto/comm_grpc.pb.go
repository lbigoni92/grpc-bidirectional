// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/comm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Communicator_Chat_FullMethodName = "/comm.Communicator/Chat"
)

// CommunicatorClient is the client API for Communicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicatorClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error)
}

type communicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicatorClient(cc grpc.ClientConnInterface) CommunicatorClient {
	return &communicatorClient{cc}
}

func (c *communicatorClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Communicator_ServiceDesc.Streams[0], Communicator_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Message, Message]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Communicator_ChatClient = grpc.BidiStreamingClient[Message, Message]

// CommunicatorServer is the server API for Communicator service.
// All implementations must embed UnimplementedCommunicatorServer
// for forward compatibility.
type CommunicatorServer interface {
	Chat(grpc.BidiStreamingServer[Message, Message]) error
	mustEmbedUnimplementedCommunicatorServer()
}

// UnimplementedCommunicatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommunicatorServer struct{}

func (UnimplementedCommunicatorServer) Chat(grpc.BidiStreamingServer[Message, Message]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedCommunicatorServer) mustEmbedUnimplementedCommunicatorServer() {}
func (UnimplementedCommunicatorServer) testEmbeddedByValue()                      {}

// UnsafeCommunicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicatorServer will
// result in compilation errors.
type UnsafeCommunicatorServer interface {
	mustEmbedUnimplementedCommunicatorServer()
}

func RegisterCommunicatorServer(s grpc.ServiceRegistrar, srv CommunicatorServer) {
	// If the following call pancis, it indicates UnimplementedCommunicatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Communicator_ServiceDesc, srv)
}

func _Communicator_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommunicatorServer).Chat(&grpc.GenericServerStream[Message, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Communicator_ChatServer = grpc.BidiStreamingServer[Message, Message]

// Communicator_ServiceDesc is the grpc.ServiceDesc for Communicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Communicator",
	HandlerType: (*CommunicatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Communicator_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/comm.proto",
}
